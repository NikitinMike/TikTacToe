{"version":3,"sources":["Menu.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["MenuItem","console","log","this","props","item","react_default","a","createElement","className","onClick","click","disabled","React","Component","MyMenu","_this","style","maxWidth","menu","map","Menu_MenuItem","key","Welcome","hidden","name","App","state","table","menuBarClick","e","target","innerText","setState","Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45e85c61.chunk.js","sourcesContent":["import React from 'react'\n\nclass MenuItem extends React.Component {\n\n    render () {\n        console.log(this.props.item)\n        const disabled = false; // this.state.disabled;\n        // [this.props.item];\n        // this.state.disabled[this.props.item]\n        return (\n            <button className=\"flex-itm\" onClick={this.props.click} disabled={disabled}>\n                {this.props.item}\n            </button>\n        )\n    }\n\n}\n\nclass MyMenu extends React.Component {\n\n    render () {\n        return (\n            <div className=\"flex\" style={{maxWidth: this.props.maxWidth}}>\n                {this.props.menu.map(item => <MenuItem key={item} item={item} click={this.props.click}/>)}\n            </div>\n        )\n    }\n}\n\nexport default MyMenu","import './App.css'\n// import './bootstrap.css'\nimport React from 'react'\n\nimport MyMenu from './Menu';\n// import Welcome from './Welcome';\n// import BigTitle from './BigTitle';\n\nfunction Welcome(props) { return <h1 hidden>Hello, {props.name}!</h1>;}\n\nclass App extends React.Component {\n\n  state = { disabled: [\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0,\n      0,0,0,0,0,0,0,0,0,0\n    ],\n    table : [\n       0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n      10,11,12,13,14,15,16,17,18,19,\n      20,21,22,23,24,25,26,27,28,29,\n      30,31,32,33,34,35,36,37,38,39,\n      40,41,42,43,44,45,46,47,48,49,\n      50,51,52,53,54,55,56,57,58,59,\n      60,61,62,63,64,65,66,67,68,69,\n      70,71,72,73,74,75,76,77,78,79,\n      80,81,82,83,84,85,86,87,88,89,\n      90,91,92,93,94,95,96,97,98,99,\n    ]\n  } // as is constructor\n\n  menuBarClick = (e) => {\n    // e.preventDefault();\n    const item=e.target.innerText\n    const disabled = this.state.disabled\n    console.log(item,disabled[item])\n    disabled[item]=true;\n    this.setState({disabled});\n    // this.render()\n  }\n\n  render () {\n\n    return (\n      <div className='App'>\n      <Welcome name=\"Kitty\"/>\n      <MyMenu maxWidth={50*10} menu={this.state.table} click={this.menuBarClick}/>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}